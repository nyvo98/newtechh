{"ast":null,"code":"import _objectSpread from \"/home/lcnghia/Desktop/STORY/newtechh/FRONTEND/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nlet redux = require('redux');\n\nlet isAuthenticate = '';\nlet username = '';\nlet role = '';\nlet token = '';\nlet responseGoole = '';\nlet selectType = null;\nlet user = localStorage.getItem('userStory');\nlet imageUrl = 'http://localhost:3000/image/ava.png';\n\nif (user != null) {\n  isAuthenticate = JSON.parse(user).isAuthenticate ? JSON.parse(user).isAuthenticate : '';\n  username = JSON.parse(user).isAuthenticate ? JSON.parse(user).username : '';\n  role = JSON.parse(user).isAuthenticate ? JSON.parse(user).role : '';\n  token = JSON.parse(user).isAuthenticate ? JSON.parse(user).token : '';\n  responseGoole = JSON.parse(user).isAuthenticate ? JSON.parse(user).responseGoole : '';\n  imageUrl = JSON.parse(user).isAuthenticate ? JSON.parse(user).imageUrl : '';\n  'http://localhost:3000/image/ava.png'; //selectType = JSON.parse(user).isAuthenticate ? JSON.parse(user).selectType : null;\n}\n\nlet InitialState = {\n  isAuthenticate,\n  username,\n  role,\n  selectType,\n  token,\n  responseGoole,\n  imageUrl\n};\n\nconst allReducer = (state = InitialState, action) => {\n  switch (action.type) {\n    case \"IS_AUTHENTICATE\":\n      localStorage.setItem('userStory', JSON.stringify({\n        isAuthenticate: true,\n        username: action.username,\n        role: action.role,\n        token: action.token,\n        responseGoole: action.responseGoole,\n        imageUrl: action.imageUrl\n      }));\n      return _objectSpread({}, state, {\n        isAuthenticate: true,\n        username: action.username,\n        role: action.role,\n        token: action.token,\n        responseGoole: action.responseGoole,\n        imageUrl: action.imageUrl\n      });\n\n    case \"IS_LOGOUT\":\n      localStorage.setItem('userStory', JSON.stringify({\n        isAuthenticate: false,\n        username: '',\n        role: '',\n        token: '',\n        responseGoole: '',\n        imageUrl: 'http://localhost:3000/image/ava.png'\n      }));\n      return _objectSpread({}, state, {\n        isAuthenticate: false,\n        username: '',\n        role: '',\n        token: '',\n        responseGoole: '',\n        imageUrl: 'http://localhost:3000/image/ava.png'\n      });\n\n    case \"SELECT_TYPE\":\n      return _objectSpread({}, state, {\n        selectType: action.typeSelect\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nlet store = redux.createStore(allReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nstore.subscribe(function () {\n  console.log(JSON.stringify(store.getState()));\n});\nexport default store;","map":{"version":3,"sources":["/home/lcnghia/Desktop/STORY/newtechh/FRONTEND/frontend/src/store/store.js"],"names":["redux","require","isAuthenticate","username","role","token","responseGoole","selectType","user","localStorage","getItem","imageUrl","JSON","parse","InitialState","allReducer","state","action","type","setItem","stringify","typeSelect","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","console","log","getState"],"mappings":"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","sourcesContent":["let redux = require('redux');\r\nlet isAuthenticate = '';\r\nlet username  = '';\r\nlet role  = '';\r\nlet token = ''\r\nlet responseGoole = '';\r\nlet selectType = null;\r\nlet user =localStorage.getItem('userStory');\r\nlet imageUrl = 'http://localhost:3000/image/ava.png';\r\nif(user!=null){\r\n    isAuthenticate = JSON.parse(user).isAuthenticate ? JSON.parse(user).isAuthenticate : '';\r\n    username  = JSON.parse(user).isAuthenticate ? JSON.parse(user).username : '';\r\n    role  = JSON.parse(user).isAuthenticate ? JSON.parse(user).role : '';\r\n    token = JSON.parse(user).isAuthenticate ? JSON.parse(user).token : '';\r\n    responseGoole = JSON.parse(user).isAuthenticate ? JSON.parse(user).responseGoole : '';\r\n    imageUrl = JSON.parse(user).isAuthenticate ? JSON.parse(user).imageUrl : ''; 'http://localhost:3000/image/ava.png';\r\n    //selectType = JSON.parse(user).isAuthenticate ? JSON.parse(user).selectType : null;\r\n}\r\nlet InitialState = { \r\n  \r\n    isAuthenticate ,\r\n    username,\r\n    role,\r\n    selectType,\r\n    token,\r\n    responseGoole,\r\n    imageUrl\r\n  \r\n}\r\n\r\nconst allReducer = (state=InitialState,action)=>{\r\n    switch(action.type){\r\n        case  \"IS_AUTHENTICATE\" :\r\n            localStorage.setItem('userStory',JSON.stringify({isAuthenticate:true,username :action.username,role:action.role,token:action.token,responseGoole:action.responseGoole,imageUrl : action.imageUrl}))\r\n            return {...state,\r\n                        isAuthenticate:true,\r\n                        username :action.username,\r\n                        role:action.role,\r\n                        token:action.token,\r\n                        responseGoole:action.responseGoole,\r\n                        imageUrl : action.imageUrl\r\n                    };\r\n        case \"IS_LOGOUT\" :\r\n            localStorage.setItem('userStory',JSON.stringify({isAuthenticate : false,username : '',role:'',token : '',responseGoole:'',imageUrl :'http://localhost:3000/image/ava.png'}))    \r\n            return {...state,isAuthenticate : false,username : '',role:'',token : '',responseGoole:'',imageUrl :'http://localhost:3000/image/ava.png'};\r\n        case \"SELECT_TYPE\":\r\n            return {...state,selectType:action.typeSelect}\r\n        default : \r\n            return {...state};\r\n\r\n    }\r\n}\r\n\r\nlet store = redux.createStore(allReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nstore.subscribe(function(){\r\n    console.log(JSON.stringify(store.getState()));\r\n})\r\nexport default store;"]},"metadata":{},"sourceType":"module"}